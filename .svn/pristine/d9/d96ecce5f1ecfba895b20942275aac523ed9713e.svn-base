
package com.sdrc.covid19odisha.utils;

import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.oauth2.common.OAuth2AccessToken;
import org.springframework.security.oauth2.provider.OAuth2Authentication;
import org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationDetails;
import org.springframework.security.oauth2.provider.token.TokenStore;
import org.springframework.stereotype.Component;

import com.sdrc.covid19odisha.models.UserModel;
import com.sdrc.covid19odisha.repositories.AreaRepository;

/**
 * @author Subham Ashish (subham@sdrc.co.in)
 *
 */
@Component
public class TokenInfoExtracter {

	@Autowired(required = false)
	private TokenStore tokenStore;
	
	@Autowired
	private AreaRepository areaRepository;

	/*
	 * it retrieves the user-info from JWT token.
	 */
	public Map<String, Object> tokenInfo(OAuth2Authentication auth) {

		OAuth2AuthenticationDetails details = (OAuth2AuthenticationDetails) auth.getDetails();
		OAuth2AccessToken accessToken = tokenStore.readAccessToken(details.getTokenValue());
		return accessToken.getAdditionalInformation();

	}

	/*
	 * Extracting the user info from JWT token and setting it to UserModel
	 * Object
	 */
	public UserModel getUserModelInfo(OAuth2Authentication auth) {

		Map<String, Object> tokenInfoMap = tokenInfo(auth);

		UserModel user = new UserModel();

		user.setEmailId(tokenInfoMap.get("emailId") != null ? tokenInfoMap.get("emailId").toString() : "");

		user.setUserId(tokenInfoMap.get("userId").toString());

		Set<String> idSet = new HashSet<>();
		Set<String> roleSet = new HashSet<>();

		StringTokenizer stId = new StringTokenizer(tokenInfoMap.get("designationIds").toString(), ",");

		while (stId.hasMoreTokens()) {
			String nextToken = stId.nextToken();
			nextToken=nextToken.replace("[","").replace("]","");
			
			idSet.add(nextToken);
		}

		StringTokenizer stName = new StringTokenizer(tokenInfoMap.get("designationNames").toString(), ",");

		while (stName.hasMoreTokens()) {
			String nextToken = stName.nextToken();
			nextToken=nextToken.replace("[","").replace("]","");
			roleSet.add(nextToken);
		}

		user.setRoleIds(idSet);
		user.setRoles(roleSet);

		Map<String, Object> sessionAreaMap = (Map<String, Object>) tokenInfoMap.get("sessionMap");

		// extracting designation slug-id from tokenInfoMap
		List<Integer> desgSlugIds = (List<Integer>) (tokenInfoMap.get("desgSlugId"));
		user.setDesgSlugIds(desgSlugIds);
		user.setDesgnName(((List<String>) (tokenInfoMap.get("designationNames"))).get(0));

		
		
		//StringTokenizer partnerIdToken = new StringTokenizer(sessionAreaMap.get("partnertId").toString(), ",");

		Set<String> partnerIdS = new HashSet<>();
		
		/*while (partnerIdToken.hasMoreTokens()) {
			
			String nextToken = partnerIdToken.nextToken();
			nextToken=nextToken.replace("[","").replace("]","");
			partnerIdS.add(nextToken);
		}*/
		
		//user.setPartnerId(new ArrayList<>(partnerIdS));
		user.setAreaLevel("STATE");

		return user;
	}
}
