package com.sdrc.covid19odisha.services;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.springframework.data.mongodb.core.aggregation.ConditionalOperators.when;
import static org.springframework.data.mongodb.core.query.Criteria.where;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.GroupOperation;
import org.springframework.data.mongodb.core.aggregation.LookupOperation;
import org.springframework.data.mongodb.core.aggregation.MatchOperation;
import org.springframework.data.mongodb.core.aggregation.ProjectionOperation;
import org.springframework.data.mongodb.core.aggregation.UnwindOperation;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.stereotype.Service;

import com.sdrc.covid19odisha.collections.SubmissionData;

@Service
public class ReportServiceImpl implements ReportService {

	@Autowired
	private MongoTemplate mongoTemplate;
	
	@Override
	public Map<String, List<?>> getQueryReportData() {
		MatchOperation match = Aggregation.match(Criteria.where("isVerified").is(true).and("formId").is(1));
		
		ProjectionOperation dataProject = Aggregation.project("data");
		ProjectionOperation projection = Aggregation.project().and("data.preferredDistrict").as("district")
				.and(when(where("data.awareness").ne(null)).then(1).otherwise(0)).as("awareness")
				.and(when(where("data.fieldSupport").ne(null)).then(1).otherwise(0)).as("fieldSupport")
				.and(when(where("data.essentials").ne(null)).then(1).otherwise(0)).as("essentials")
				.and(when(where("data.health").ne(null)).then(1).otherwise(0)).as("health")
				.and(when(where("data.reliefCampMgmt").ne(null)).then(1).otherwise(0)).as("reliefCampMgmt");
		
		UnwindOperation unwind = Aggregation.unwind("district");
		
		GroupOperation group = Aggregation.group("district")
				.sum("awareness").as("awareness")
				.sum("fieldSupport").as("fieldSupport")
				.sum("essentials").as("essentials")
				.sum("health").as("health")
				.sum("reliefCampMgmt").as("reliefCampMgmt");
		
		LookupOperation lookup = Aggregation.lookup("area", "_id", "areaId", "area");
		
		UnwindOperation areaUnwind = Aggregation.unwind("area");
		
		ProjectionOperation projectAll = Aggregation.project().and("area.areaName").as("district")
				.and("awareness").as("awareness")
				.and("fieldSupport").as("fieldSupport")
				.and("essentials").as("essentials")
				.and("health").as("health")
				.and("reliefCampMgmt").as("reliefCampMgmt");
		
		Aggregation resultQuery=Aggregation.newAggregation(match, dataProject, projection, unwind, group, lookup, areaUnwind, projectAll);
		List<Map> reportMap = mongoTemplate.aggregate(resultQuery, SubmissionData.class, Map.class).getMappedResults();
		List<String> header = Arrays.asList("district", "awareness","fieldSupport", "essentials", "health", "reliefCampMgmt");
		Map<String, List<?>> reportTable = new HashMap<String, List<?>>();
		reportTable.put("tableColumn", header);
		reportTable.put("tableData", reportMap);
		return reportTable;
	}
}
