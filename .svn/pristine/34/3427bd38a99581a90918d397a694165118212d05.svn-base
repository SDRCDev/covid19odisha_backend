package com.sdrc.covid19odisha.services;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.ConfigurableEnvironment;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.sdrc.covid19odisha.collections.OTPToken;
import com.sdrc.covid19odisha.collections.SubmissionData;
import com.sdrc.covid19odisha.repositories.OTPRepository;
import com.sdrc.covid19odisha.repositories.SubmissionRepository;

@Service
public class SubmissionServiceImpl implements SubmissionService {

	@Autowired
	private SubmissionRepository submissionRepository;
	
	@Autowired
	private ConfigurableEnvironment configurableEnvironment;

	@Autowired
	private OTPRepository otpRepository;
	
	@Override
	public Map<String, Object> saveSubmission(Map<String, Object> data) {
		
		Map<String, Object> responseObject = new HashMap<String, Object>();
		SubmissionData oldData = submissionRepository.getSubmissionByMobileNumber(String.valueOf(data.get("mobile")));
		if (oldData!=null && oldData.getData().get("mobile").equals(data.get("mobile"))) {
			responseObject.put("status", "mobile_number_error");
			responseObject.put("message", "Mobile number already linked with another account");
			
			return responseObject;
		}
		SubmissionData submission = new SubmissionData();
		submission.setCreatedBy("anonymous");
		submission.setCreatedDate(new Date());
		submission.setIsVerified(false);
		submission.setData(data);
		Integer statuscode = null;
		
		SubmissionData s = null;
		try {
			 s = submissionRepository.save(submission);
			 responseObject.put("id", s.get_id());
				if(s.get_id()!= null) {
					responseObject.put("status", "success");
				} else {
					responseObject.put("status", "failed");
				}
		} catch (Exception e) {
			responseObject.put("status", "failed");
		}
		try {
			statuscode = sendVerificationMessage(submission.getData());
		} catch (Exception e) {
			e.printStackTrace();
			responseObject.put("status", "mobile_number_error");
		}
		
		return responseObject;
	}
	
	public Integer sendVerificationMessage(Map<String, Object> data) {
		RestTemplate restTemplate = new RestTemplate();
		int status=0;
		String url = configurableEnvironment.getProperty("msg.url.and.credential");
		String msgType = configurableEnvironment.getProperty("msg.type");
		String callBackURL = configurableEnvironment.getProperty("callback.url");
		String senderId = configurableEnvironment.getProperty("sender.id");
		String password = configurableEnvironment.getProperty("password");
		String version = configurableEnvironment.getProperty("version");
		
		OTPToken existingToken = otpRepository.findByMobileNumberAndIsValid(String.valueOf(data.get("mobile")), true);
		String otp = existingToken!=null?existingToken.getOtp():OTP(6);
		String message = "Hey "+data.get("fullName")+", your registration is pending. Please complete your registration by using OTP "+otp+". This OTP is valid for 30 minutes.";
		String urlMSG = url+password+version+data.get("mobile")+msgType+message+senderId+callBackURL;
		ResponseEntity<String> entity = null;
		try {
			entity = restTemplate.exchange(urlMSG, HttpMethod.GET, null,String.class);
			System.out.println(entity.getBody());
			JsonObject responseJson = new Gson().fromJson(entity.getBody(), JsonObject.class);
			status = responseJson.getAsJsonObject("result").getAsJsonObject("status").get("statusCode").getAsInt();
			System.out.println("Status code :: "+status);
			
			if (status == 0 && existingToken==null) {
				OTPToken otpToken = new OTPToken(otp, new Date(), String.valueOf(data.get("mobile")), true);
				otpRepository.save(otpToken);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return status;
	}
	
	public Map<String, Object> validateOTP(String otp, String mobileNumber, String id) {
		Map<String, Object> resp = new HashMap<>();
		SubmissionData data = submissionRepository.findBy_id(id);
		OTPToken otpToken = otpRepository.getOtp(mobileNumber, otp);
		if (otpToken!=null && data.getData().get("mobile").equals(mobileNumber)) {
			data.setIsVerified(true);;
			submissionRepository.save(data);
			otpToken.setValid(false);
			otpRepository.save(otpToken);
			resp.put("isValid", true);
		}
		return resp;
	}

	static String OTP(int len) 
    { 
        System.out.println("Generating OTP using random() : "); 
        System.out.print("You OTP is : "); 
  
        // Using numeric values 
        String numbers = "0123456789"; 
  
        // Using random method 
        Random rndm_method = new Random(); 
  
        char[] otp = new char[len]; 
        String otpStr = "";
        for (int i = 0; i < len; i++) 
        { 
            // Use of charAt() method : to get character value 
            // Use of nextInt() as it is scanning the value as int 
            otp[i] = 
             numbers.charAt(rndm_method.nextInt(numbers.length())); 
            otpStr = otpStr+otp[i];
        } 
        return otpStr; 
    } 
	
}
