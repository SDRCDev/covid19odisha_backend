package com.sdrc.covid19odisha.services;

import java.io.File;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import org.apache.commons.lang.StringUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.util.StringUtil;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.sdrc.usermgmt.mongodb.domain.Designation;
import org.sdrc.usermgmt.mongodb.repository.DesignationRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.ConfigurableEnvironment;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.MatchOperation;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.security.oauth2.provider.OAuth2Authentication;
import org.springframework.stereotype.Service;

import com.sdrc.covid19odisha.collections.Area;
import com.sdrc.covid19odisha.collections.Question;
import com.sdrc.covid19odisha.collections.SubmissionData;
import com.sdrc.covid19odisha.collections.TrackerData;
import com.sdrc.covid19odisha.collections.Type;
import com.sdrc.covid19odisha.collections.TypeDetail;
import com.sdrc.covid19odisha.models.UserModel;
import com.sdrc.covid19odisha.repositories.AreaLevelRepository;
import com.sdrc.covid19odisha.repositories.AreaRepository;
import com.sdrc.covid19odisha.repositories.QuestionRepository;
import com.sdrc.covid19odisha.repositories.SubmissionRepository;
import com.sdrc.covid19odisha.repositories.TrackerDataRepository;
import com.sdrc.covid19odisha.repositories.TypeDetailRepository;
import com.sdrc.covid19odisha.repositories.TypeRepository;
import com.sdrc.covid19odisha.utils.ExcelStyleSheet;
import com.sdrc.covid19odisha.utils.TokenInfoExtracter;

@Service
public class HomeServiceImpl implements HomeService {
	
	@Autowired 
	private SubmissionRepository submissionRepository;
	
	@Autowired
	private TrackerDataRepository trackerDataRepository;
	
	@Autowired
	private QuestionRepository  questionRepository;
	
	
	@Autowired
	private TypeDetailRepository typeDetailRepository;

	@Autowired
	private AreaRepository areaRepository;
	
	@Autowired
	private ConfigurableEnvironment configurableEnvironment;
	
	@Autowired
	private TypeRepository typeRepository;
	
	@Autowired
	private AreaLevelRepository areaLevelRepository;
	
	@Autowired
	private TokenInfoExtracter tokenInfoExtracter;
	
	@Autowired
	private DesignationRepository designationRepository;
	
	@Autowired
	private MongoTemplate mongoTemplate;
	
	
	
	private SimpleDateFormat sdfDateTimeWithSeconds = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

	private SimpleDateFormat sDateFormat = new SimpleDateFormat("dd-MM-yyyy");

	@Override
	public ResponseEntity<Map<String, Integer>> getIndicatorValue() {
		List<SubmissionData> listOfSubmissionData = submissionRepository.findByIsVerifiedTrue();
		Map<String, Integer> mapOfIndecatorValue = new LinkedHashMap<String, Integer>();
		int volunteersregistered = 0;
		int institutionsregistered = 0;
		Set<Integer> districtsSet = new HashSet<Integer>();
		Set<Integer> blocksSet = new HashSet<Integer>();
		for (SubmissionData submissionData : listOfSubmissionData) {
			if (submissionData.getData().get("fullName") != null) {
				volunteersregistered += 1;

				if ((Integer) submissionData.getData().get("areaLevel") == 1) {
					List<Integer> districtList = (List<Integer>) submissionData.getData().get("preferredDistrict");
					for (Integer integer : districtList) {
						districtsSet.add(integer);
					}
				} else if ((Integer) submissionData.getData().get("areaLevel") == 2) {
					Integer disrict = (Integer) submissionData.getData().get("preferredDistrict");
					districtsSet.add(disrict);
					List<Integer> blocklList = (List<Integer>) submissionData.getData().get("preferredBlock");
					for (Integer integer : blocklList) {
						blocksSet.add(integer);
					}
				} else if ((Integer) submissionData.getData().get("areaLevel") == 3) {
					Integer disrict = (Integer) submissionData.getData().get("preferredDistrict");
					districtsSet.add(disrict);
					Integer block = (Integer) submissionData.getData().get("preferredBlock");
					blocksSet.add(block);
				}

			} else if (submissionData.getData().get("organizationName") != null) {
				institutionsregistered += 1;
				
				if ((Integer) submissionData.getData().get("areaOfService") == 106) {
					List<Integer> districtList = (List<Integer>) submissionData.getData().get("preferredDistrict");
					for (Integer integer : districtList) {
						districtsSet.add(integer);
					}
				} else if ((Integer) submissionData.getData().get("areaOfService") == 107) {
					Integer disrict = (Integer) submissionData.getData().get("preferredDistrict");
					districtsSet.add(disrict);
					List<Integer> blocklList = (List<Integer>) submissionData.getData().get("preferredBlock");
					for (Integer integer : blocklList) {
						blocksSet.add(integer);
					}
				} 
			}

		}
		mapOfIndecatorValue.put("Volunteers Registered", volunteersregistered);
		mapOfIndecatorValue.put("InstitutionsRegistered", institutionsregistered);
		mapOfIndecatorValue.put("Districts", districtsSet.size());
		mapOfIndecatorValue.put("Blocks", blocksSet.size());
		return new ResponseEntity<Map<String, Integer>>(mapOfIndecatorValue, HttpStatus.OK);
	}

	@Override
	public ResponseEntity<String> saveTabularData(List<Map<String, Object>> data,String date) {
		
		TrackerData fetchedTrackerData = null;
		if (date == null) {
			fetchedTrackerData = trackerDataRepository.findTop1ByOrderByIdDesc();
		} else {
			fetchedTrackerData = trackerDataRepository.findByDbDate(date);
		}
		
		
		fetchedTrackerData.setUpdatedDate(new Date());
		fetchedTrackerData.setCreatedDate(new Date());
		
        int confirmedCasesDiff = 0;
        int recoveredCasesDiff = 0;
        int deceasedCasesDiff = 0;
        int activeCasesDiff=0;
        
        int totalConfirmedCases = 0;
        int totalRecoveredCases = 0;
        int totalDeceasedCases = 0;
        int totalActiveCases = 0;
        
        
        List<Map<String, Object>> fetchedData = fetchedTrackerData.getData();
        
		for (Map<String, Object> fetchedDataMap : fetchedData) {
			for (Map<String, Object> newData : data) {
				if (fetchedDataMap.get("areaName").equals(newData.get("areaName"))
						&& fetchedDataMap.get("sbmAreaId").equals(newData.get("sbmAreaId"))) {
					fetchedDataMap.put("confirmedCasesDiff", newData.get("confirmedCasesDiff"));
					fetchedDataMap.put("recoveredCasesDiff", newData.get("recoveredCasesDiff"));
					fetchedDataMap.put("deceasedCasesDiff", newData.get("deceasedCasesDiff"));
					fetchedDataMap.put("activeCasesDiff", newData.get("activeCasesDiff"));
					
					fetchedDataMap.put("confirmedCases", fetchedDataMap.get("confirmedCases"));
					fetchedDataMap.put("recoveredCases", fetchedDataMap.get("recoveredCases"));
					fetchedDataMap.put("deceasedCases", fetchedDataMap.get("deceasedCases"));
					fetchedDataMap.put("activeCases", fetchedDataMap.get("activeCases"));
					
					fetchedDataMap.put("totalConfirmedCases",(int) fetchedDataMap.get("confirmedCases") + (int) newData.get("confirmedCasesDiff"));
					fetchedDataMap.put("totalRecoveredCases",(int) fetchedDataMap.get("recoveredCases") + (int) newData.get("recoveredCasesDiff"));
					fetchedDataMap.put("totalDeceasedCases",(int) fetchedDataMap.get("deceasedCases") + (int) newData.get("deceasedCasesDiff"));
					
					int activeCases = (int) fetchedDataMap.get("totalConfirmedCases")- (int) fetchedDataMap.get("totalRecoveredCases") - (int) fetchedDataMap.get("totalDeceasedCases");
					//int activeCasesInc=activeCases-(int)fetchedDataMap.get("activeCases");
					
					fetchedDataMap.put("activeCasesDiff",activeCases-(int)fetchedDataMap.get("activeCases"));	
					
					/*int activeCasesDiff = (int) newData.get("confirmedCasesDiff")- (int) newData.get("recoveredCasesDiff") - (int) newData.get("deceasedCasesDiff");
					if(activeCasesDiff<0) {
						fetchedDataMap.put("activeCasesDiff",(activeCasesDiff*-1));
					}else {
						fetchedDataMap.put("activeCasesDiff",activeCasesDiff);	
					}*/
					fetchedDataMap.put("totalActiveCases", activeCases);
				}
			}
			
			if(!fetchedDataMap.get("areaCode").equals("IND") && !fetchedDataMap.get("areaCode").equals("IND021")) {
				confirmedCasesDiff+=(int)fetchedDataMap.get("confirmedCasesDiff");
				recoveredCasesDiff +=(int)fetchedDataMap.get("recoveredCasesDiff");
		        deceasedCasesDiff +=(int)fetchedDataMap.get("deceasedCasesDiff");
		        activeCasesDiff+=(int)fetchedDataMap.get("activeCasesDiff");
		        
		       totalConfirmedCases +=(int)fetchedDataMap.get("totalConfirmedCases");
		       totalRecoveredCases +=(int)fetchedDataMap.get("totalRecoveredCases");
		       totalDeceasedCases +=(int)fetchedDataMap.get("totalDeceasedCases");
		       totalActiveCases +=(int)fetchedDataMap.get("totalActiveCases");
			}
			fetchedTrackerData.setData(fetchedData);
			trackerDataRepository.save(fetchedTrackerData);
			
		}
		
		
		
		for (Map<String, Object> fetchedDataMap : fetchedData) {
			if(fetchedDataMap.get("areaCode").toString().equals("IND021")) {
				fetchedDataMap.put("confirmedCasesDiff", confirmedCasesDiff);
				fetchedDataMap.put("recoveredCasesDiff", recoveredCasesDiff);
				fetchedDataMap.put("deceasedCasesDiff", deceasedCasesDiff);
				
				
				fetchedDataMap.put("totalConfirmedCases",totalConfirmedCases);
				fetchedDataMap.put("totalRecoveredCases",totalRecoveredCases);
				fetchedDataMap.put("totalDeceasedCases",totalDeceasedCases);
				
				int activeCases = (int) fetchedDataMap.get("totalConfirmedCases")
						- (int) fetchedDataMap.get("totalRecoveredCases") - (int) fetchedDataMap.get("totalDeceasedCases");
				fetchedDataMap.put("totalActiveCases", activeCases);
				
				fetchedTrackerData.setData(fetchedData);
				trackerDataRepository.save(fetchedTrackerData);
			}
		}
		return new ResponseEntity<String>("Saved", HttpStatus.OK);
	}

	
	@Override
	@Scheduled(cron = "0 2 0 1/1 * ?")
	public void cornJob() {

		TrackerData fetchedTrackerData = trackerDataRepository.findTop1ByOrderByIdDesc();
		List<Map<String, Object>> fetchedData = fetchedTrackerData.getData();
		List<Map<String, Object>> listOfFetchedDataMap=  new ArrayList<Map<String,Object>>();
		for (Map<String, Object> fetchedDataMap : fetchedData) {
			
			fetchedDataMap.put("confirmedCasesDiff",0);
			fetchedDataMap.put("recoveredCasesDiff", 0);
			fetchedDataMap.put("deceasedCasesDiff", 0);
			fetchedDataMap.put("activeCasesDiff", 0);
			
			fetchedDataMap.put("confirmedCases",fetchedDataMap.get("totalConfirmedCases"));
			fetchedDataMap.put("recoveredCases", fetchedDataMap.get("totalRecoveredCases") );
			fetchedDataMap.put("deceasedCases", fetchedDataMap.get("totalDeceasedCases") );
			fetchedDataMap.put("activeCases",fetchedDataMap.get("totalActiveCases") );
			
			listOfFetchedDataMap.add(fetchedDataMap);
		}
		TrackerData trackerData = new TrackerData();
		trackerData.setData(listOfFetchedDataMap);
		trackerData.setCreatedDate(new Date());
		trackerData.setUpdatedDate(new Date());
		trackerData.setDbDate(new SimpleDateFormat("dd-MM-yyyy").format(Calendar.getInstance().getTime()));
		trackerDataRepository.save(trackerData);
	}

	@Override
	public ResponseEntity<TrackerData> getTabularData(String date) {
		TrackerData fetchedTrackerData = null;
		if(date==null) {
		fetchedTrackerData = trackerDataRepository.findTop1ByOrderByIdDesc();
		}
		else {
			fetchedTrackerData=trackerDataRepository.findByDbDate(date);	
		}
		return new ResponseEntity<TrackerData>(fetchedTrackerData, HttpStatus.OK);
	}

	@Override
	public ResponseEntity<String> getRawData(Integer formId, String sdate, String edate, OAuth2Authentication oauth) throws Exception {
		
		UserModel principal = tokenInfoExtracter.getUserModelInfo(oauth);
		List<Designation> desig = designationRepository.findByIdIn(new ArrayList<String>(principal.getRoleIds()));
		
		
		
		List<SubmissionData> listOfSubmissionData = null;
		Question question = questionRepository.findByFormId(formId);
		
		if (desig.get(0).getName().equals("State Level") || desig.get(0).getName().equals("ADMIN")) {
			listOfSubmissionData = submissionRepository.findByFormIdAndIsVerifiedTrue(formId);
		} else {
			if(principal.getAreaIds()!=null) {
				MatchOperation match = Aggregation.match(Criteria.where("isVerified").is(true).and("formId").is(formId).and("data.preferredDistrict").in(principal.getAreaIds()));
				Aggregation resultQuery=Aggregation.newAggregation(match);
				listOfSubmissionData = mongoTemplate.aggregate(resultQuery, SubmissionData.class, SubmissionData.class).getMappedResults();
			}else {
				listOfSubmissionData=new ArrayList<>();
			}
		}
		
		
		if(edate==null)
		{
			edate=sdate;	
		}
		List<TypeDetail> typeDetailList = typeDetailRepository.findAll();
		Map<Integer, TypeDetail> typeDetailMap = typeDetailList.stream()
				.collect(Collectors.toMap(TypeDetail::getSlugId, typeDe -> typeDe));
		
		List<Type> typeList = typeRepository.findAll();
		Map<String, Type> typeMap = typeList.stream()
				.collect(Collectors.toMap(Type::getTypeName, typeDe -> typeDe));
		/**
		 * get all Area(only areaid and areaname)
		 */
		List<Area> areaList = areaRepository.findAll();

		Map<Integer, String> areaMap = areaList.stream().collect(Collectors.toMap(Area::getAreaId, Area::getAreaName));
		
		Map<Integer, String> areaLevelMap = new HashMap<Integer, String>();
		areaLevelMap.put(1, "District Level");
		areaLevelMap.put(2, "Block Level");
		areaLevelMap.put(3, "Gram Panchayat Level");
	
		
		
		
		
		/*if(sdate==null) {
			listOfSubmissionData = submissionRepository.findByFormIdAndIsVerifiedTrue(formId);
		}else {
			sdate = sdate.concat(" 00:00:00");
			edate = edate.concat(" 23:59:59");
			Date startDate = sdfDateTimeWithSeconds.parse(sdate);
			Date endDate = sdfDateTimeWithSeconds.parse(edate);
			
			listOfSubmissionData = submissionRepository.findByFormIdAndCreatedDateBetweenAndIsVerifiedTrue(formId, startDate,endDate);
		}*/
		
		
		XSSFWorkbook workbook = new XSSFWorkbook();
		XSSFSheet sheet = workbook.createSheet("Data");
		XSSFCellStyle cellstyleMiddle = ExcelStyleSheet.getStyleForLeftMiddle(workbook);
		int rowNum = 1;
		int questionCellCount = 0;
		Row row = sheet.createRow(rowNum);
		Row subrow = sheet.createRow(++rowNum);
		Row hideRow = sheet.createRow(++rowNum);
		
		List<Map<String,Object>> listOfQusetionMap = question.getQuestions();
		
		
		for (Map<String,Object> questionMap : listOfQusetionMap) {
			String hideCellValue = null;
			if(questionMap.get("TypeName")!=null) {
				hideCellValue=questionMap.get("SubmissionKey")+"#"+questionMap.get("QuestionType")+"#"+questionMap.get("TypeName");
			}else {
				hideCellValue=questionMap.get("SubmissionKey")+"#"+questionMap.get("QuestionType");
			}
			
			if(!questionMap.get("QuestionType").toString().equals("selectMultiple")) {
				Cell cell1= subrow.createCell(questionCellCount);
				sheet.addMergedRegion(new CellRangeAddress(1, 2, questionCellCount, questionCellCount));
			Cell cell2=row.createCell(questionCellCount);//
			cell2.setCellValue(questionMap.get("Question").toString());
			cell2.setCellStyle( cellstyleMiddle);
			cell1.setCellStyle( cellstyleMiddle);
			//row.createCell(questionCellCount).setCellValue(questionMap.get("Question").toString());
			hideRow.createCell(questionCellCount).setCellValue(hideCellValue);
			}else {
				if(questionMap.get("TypeName")!=null) {
					List<TypeDetail> listOfTypeDetails = typeDetailRepository.findByTypeId(typeMap.get(questionMap.get("TypeName")).getSlugId());
					//System.out.println(listOfTypeDetails.size());
					int oldquestionCellCount=questionCellCount;
					int subQuestionCellCount=questionCellCount;
					sheet.addMergedRegion(new CellRangeAddress(1, 1, questionCellCount, (questionCellCount+listOfTypeDetails.size()-1)));
					Cell cell3 = row.createCell(questionCellCount);
					cell3.setCellValue(questionMap.get("Question").toString());
					cell3.setCellStyle( cellstyleMiddle);
					
					for (TypeDetail type : listOfTypeDetails) {
						Cell cell4 = subrow.createCell(subQuestionCellCount);
						cell4.setCellValue(type.getName());
						cell4.setCellStyle( cellstyleMiddle);
						sheet.autoSizeColumn(subQuestionCellCount);
						hideRow.createCell(subQuestionCellCount).setCellValue(hideCellValue+"#"+type.getSlugId());
						subQuestionCellCount++;
					}
					
					questionCellCount=oldquestionCellCount+listOfTypeDetails.size()-1;
					
				}
			}
			 sheet.autoSizeColumn(questionCellCount);
			 
			 
			 questionCellCount++;
		}
		
		
		Row dataRow = null;
		Row keyRow = sheet.getRow(3);
		List<Map<String,Object>> submissionDataMap=new ArrayList<>();
		
		for (SubmissionData submissionData : listOfSubmissionData) {
			dataRow  = sheet.createRow(++rowNum);
			int cellCount = 0;
			for (Cell cell : keyRow) {
			
				if(cell.getStringCellValue().split("#")[1].equals("text")) {
				dataRow.createCell(cellCount).setCellValue((submissionData.getData().get(cell.getStringCellValue().split("#")[0])==null || submissionData.getData().get(cell.getStringCellValue().split("#")[0])=="null")?"":submissionData.getData().get(cell.getStringCellValue().split("#")[0]).toString());
				}else if(cell.getStringCellValue().split("#")[1].equals("selectOne")) {
					if(cell.getStringCellValue().split("#")[2].equals("areaLevel")) {
					dataRow.createCell(cellCount).setCellValue((submissionData.getData().get(cell.getStringCellValue().split("#")[0])==null || submissionData.getData().get(cell.getStringCellValue().split("#")[0])=="null")?"":areaLevelMap.get(Integer.parseInt(submissionData.getData().get(cell.getStringCellValue().split("#")[0]).toString())));
					}else if(cell.getStringCellValue().split("#")[2].equals("area")) {
						if(submissionData.getData().get(cell.getStringCellValue().split("#")[0]) instanceof List<?>) {
							//System.out.println("List= "+submissionData.getData().get(cell.getStringCellValue().split("#")[0]));
							StringBuilder areaName =new StringBuilder("");
							List<Integer> areaIds = (List<Integer>) submissionData.getData().get(cell.getStringCellValue().split("#")[0]);
							for (Integer areaId : areaIds) {
								areaName.append(areaMap.get(areaId)+", ");
							}
							dataRow.createCell(cellCount).setCellValue((submissionData.getData().get(cell.getStringCellValue().split("#")[0])==null || submissionData.getData().get(cell.getStringCellValue().split("#")[0])=="null")?"":areaName.toString());
						}else {
							//System.out.println("Single= "+submissionData.getData().get(cell.getStringCellValue().split("#")[0]));
							dataRow.createCell(cellCount).setCellValue((submissionData.getData().get(cell.getStringCellValue().split("#")[0])==null || submissionData.getData().get(cell.getStringCellValue().split("#")[0])=="null")?"":areaMap.get(Integer.parseInt(submissionData.getData().get(cell.getStringCellValue().split("#")[0]).toString())));
						}
					}else {
						dataRow.createCell(cellCount).setCellValue((submissionData.getData().get(cell.getStringCellValue().split("#")[0])==null || submissionData.getData().get(cell.getStringCellValue().split("#")[0])=="null")?"":typeDetailMap.get(Integer.parseInt(submissionData.getData().get(cell.getStringCellValue().split("#")[0]).toString())).getName());
					}
					
				}else if(cell.getStringCellValue().split("#")[1].equals("selectMultiple")) {
					List<Integer> multiValue=(List<Integer>) submissionData.getData().get(cell.getStringCellValue().split("#")[0]);
					System.out.println(Integer.parseInt(cell.getStringCellValue().split("#")[3]));
					if(multiValue==null) {
						dataRow.createCell(cellCount).setCellValue("");
				}else{if(multiValue.contains(Integer.parseInt(cell.getStringCellValue().split("#")[3]))) {
						//System.out.println(Integer.parseInt(cell.getStringCellValue().split("#")[3]));
						//dataRow.createCell(cellCount).setCellValue(submissionData.getData().get(cell.getStringCellValue().split("#")[0])==null?"N/A":typeDetailMap.get(Integer.parseInt(cell.getStringCellValue().split("#")[3])).getName());
						dataRow.createCell(cellCount).setCellValue("YES");
					}else {
						dataRow.createCell(cellCount).setCellValue("NO");
					}
					}
					
				}
				++cellCount;
			}
			
			
		}
		
		
		
		
		removeRow(sheet,3);
		String dir = configurableEnvironment.getProperty("report.path");
		File file = new File(dir);

		/*
		 * make directory if doesn't exist
		 */
		if (!file.exists())
			file.mkdirs();
		String formName=null;
		if(formId==1) {
			formName="volunteer_";
		}else {
			formName="organizational_";
		}

		String name = "Covid19_" +formName
				+ new SimpleDateFormat("ddMMyyyyHHmmss").format(new Date()) + ".xlsx";
		String path = dir + "" + name;

		FileOutputStream fos = new FileOutputStream(new File(path));
		workbook.write(fos);
		fos.close();
		workbook.close();
		return new ResponseEntity<String>(path, HttpStatus.OK);
	}

	private void removeRow(XSSFSheet sheet, int rowIndex) {
	    int lastRowNum = sheet.getLastRowNum();
	    if (rowIndex >= 0 && rowIndex < lastRowNum) {
	        sheet.shiftRows(rowIndex + 1, lastRowNum, -1);
	    }
	    if (rowIndex == lastRowNum) {
	        Row removingRow = sheet.getRow(rowIndex);
	        if (removingRow != null) {
	            sheet.removeRow(removingRow);
	        }
	    }
	}

	@Override
	public ResponseEntity<TrackerData> resetTabularData(String cDate) {
		TrackerData saveTrackerDate=null;
		if (!StringUtils.isEmpty(cDate)) {
			String pDate = String.valueOf(Integer.parseInt(cDate.split("-")[0]) - 1) + "-" + cDate.split("-")[1] + "-"
					+ cDate.split("-")[2];

			TrackerData newTrackerDate = trackerDataRepository.findByDbDate(cDate);
			TrackerData prevTrackerDate = trackerDataRepository.findByDbDate(pDate);

			List<Map<String, Object>> fetchedData = prevTrackerDate.getData();
			List<Map<String, Object>> listOfFetchedDataMap = new ArrayList<Map<String, Object>>();
			for (Map<String, Object> fetchedDataMap : fetchedData) {

				fetchedDataMap.put("confirmedCasesDiff", 0);
				fetchedDataMap.put("recoveredCasesDiff", 0);
				fetchedDataMap.put("deceasedCasesDiff", 0);
				fetchedDataMap.put("activeCasesDiff", 0);

				fetchedDataMap.put("confirmedCases", fetchedDataMap.get("totalConfirmedCases"));
				fetchedDataMap.put("recoveredCases", fetchedDataMap.get("totalRecoveredCases"));
				fetchedDataMap.put("deceasedCases", fetchedDataMap.get("totalDeceasedCases"));
				fetchedDataMap.put("activeCases", fetchedDataMap.get("totalActiveCases"));

				listOfFetchedDataMap.add(fetchedDataMap);
			}

			newTrackerDate.setData(listOfFetchedDataMap);
			newTrackerDate.setUpdatedDate(new Date());
			saveTrackerDate = trackerDataRepository.save(newTrackerDate);
			return new ResponseEntity<TrackerData>(saveTrackerDate, HttpStatus.OK);
		}else {
			return new ResponseEntity<TrackerData>(saveTrackerDate, HttpStatus.CONFLICT);
		}
	}

	@Override
	public ResponseEntity<Map<String, Integer>> getReportCount( OAuth2Authentication oauth) {
		UserModel principal = tokenInfoExtracter.getUserModelInfo(oauth);
		List<Designation> desig = designationRepository.findByIdIn(new ArrayList<String>(principal.getRoleIds()));
		
		List<SubmissionData> listOfVolSubmissionData = new ArrayList<>();
		List<SubmissionData> listOfOrgSubmissionData = new ArrayList<>();
		
		if (desig.get(0).getName().equals("State Level") || desig.get(0).getName().equals("ADMIN")) {
			listOfVolSubmissionData = submissionRepository.findByFormIdAndIsVerifiedTrue(1);
			listOfOrgSubmissionData = submissionRepository.findByFormIdAndIsVerifiedTrue(2);
		} else {
			if(principal.getAreaIds()!=null) {
				MatchOperation match = Aggregation.match(Criteria.where("isVerified").is(true).and("formId").is(1).and("data.preferredDistrict").in(principal.getAreaIds()));
				Aggregation resultQuery=Aggregation.newAggregation(match);
				listOfVolSubmissionData = mongoTemplate.aggregate(resultQuery, SubmissionData.class, SubmissionData.class).getMappedResults();
				
				MatchOperation matchorg = Aggregation.match(Criteria.where("isVerified").is(true).and("formId").is(2).and("data.preferredDistrict").in(principal.getAreaIds()));
				Aggregation resultQueryorg=Aggregation.newAggregation(matchorg);
				listOfOrgSubmissionData = mongoTemplate.aggregate(resultQueryorg, SubmissionData.class, SubmissionData.class).getMappedResults();
			}
		}
		Map<String, Integer> mapOfRawDataCount = new LinkedHashMap<String, Integer>();
		mapOfRawDataCount.put("Volunteers", listOfVolSubmissionData.size());
		mapOfRawDataCount.put("Institutions", listOfOrgSubmissionData.size());
		return new ResponseEntity<Map<String, Integer>>(mapOfRawDataCount, HttpStatus.OK);
	}
	
}
